@page "/turnosAceptados"
@inject HttpClient http
@inject IJSRuntime JS

<h1 style="text-align:center">Turnos aceptados</h1>
<hr />
@if (turnosAceptados == null)
{
    <h4>Cargando...</h4>
}
else if (turnosAceptados.Length == 0)
{
    <h4>No hay turnos aceptados.</h4>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Fecha</th>
                <th>Franja</th>
                <th>Hora</th>
                <th>Motivo</th>
                <th>Perro</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var turno in turnosAceptados)
            {
                <tr style="vertical-align:middle">

                    <td>@turno.Fecha.ToShortDateString()</td>
                    <td>@turno.Franja</td>
                    <td>@turno.hora.Value.ToString("h:mm tt")</td>
                    <td>@turno.motivo</td>
                    <td>@turno.Perro</td>
                    <td style="text-align: right">
                        <button class="btn btn-danger" @onclick="@(()=>noRealizado(turno.Id))"><i class="oi oi-x"></i></button>
                        <button class="btn btn-success" @onclick="@(()=>libretaSanitaria(turno.Id))"><i class="oi oi-check"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    Turno[] turnosAceptados { get; set; }

    protected override async Task OnInitializedAsync()
    {
        http.BaseAddress = new Uri("https://localhost:7083/");
        await cargarTurnosAceptados();
    }
    async Task cargarTurnosAceptados()
    {
        turnosAceptados = await http.GetFromJsonAsync<Turno[]>($"https://localhost:7083/api/turnos/aceptados");
    }
    async Task libretaSanitaria(int turnoId)
    {
        string mensajeconfirmacion = "¿Está seguro que desea marcar este turno como realizado y pasarlo al historial del perro?";
        if (await JS.InvokeAsync<bool>("confirm", mensajeconfirmacion))
        {
            Turno turno = await http.GetFromJsonAsync<Turno>($"https://localhost:7083/api/turnos/{turnoId}");
            turno.PasarAHistorial();
            turno.estado = "Realizado";
            await http.PutAsJsonAsync($"https://localhost:7083/api/turnos", turno);
            await cargarTurnosAceptados();
        }     
    }

    async Task noRealizado(int turnoId)
    {
        string mensajeconfirmacion = "¿Está seguro que desea marcar este turno como no realizado y pasarlo al historial de turnos inasistidos?";
        if (await JS.InvokeAsync<bool>("confirm", mensajeconfirmacion))
        {
            Turno turno = await http.GetFromJsonAsync<Turno>($"https://localhost:7083/api/turnos/{turnoId}");
            turno.estado = "Inasistido";
            await http.PutAsJsonAsync($"https://localhost:7083/api/turnos", turno);
            await cargarTurnosAceptados();
        }
    }
}
