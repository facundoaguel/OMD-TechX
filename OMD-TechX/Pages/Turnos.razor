@page "/turnos"
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Mvc;
@using OMD_TechX.Pages.Modales;
@inject HttpClient http
@inject IJSRuntime JS
@inject UserManager<IdentityUser> UserManager
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
<div class="d-flex">
    <div class="p-2 w-100"><h1>Turnos</h1></div>
    <div class="p-2 flex-shrink-1">
        <input type="button" class="btn btn-success" value="Sacar Turno" @onclick="() => ModalCrearTurno.Open(userId)">
    </div>
</div>

<ModalFormularioTurnos @ref="@ModalCrearTurno" TextoBoton="Sacar turno" Titulo="Crear turno" OnValidSubmit="(() => crearTurno())" Turno="@turno">
</ModalFormularioTurnos>


@if (turnos == null)
{
    <text>Cargando...</text>
}
else if (turnos.Length == 0)
{
    <text>No hay turnos.</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Fecha</th>
                <th>Franja</th>
                <th>Motivo</th>
                <th>Perro</th>
                <th>Estado</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var turno in turnos)
            {
                <tr>

                    <td>@turno.Fecha.ToShortDateString()</td>
                    <td>@turno.Franja</td>
                    <td>@turno.motivo</td>
                    <td>@turno.Perro</td>
                    <td>@turno.estado</td>

                </tr>
            }
        </tbody>
    </table>
}
<SurveyPrompt />
@code {
    Turno[] turnos { get; set; }
    Turno turno { get; set; } = new Turno();
    private ModalFormularioTurnos ModalCrearTurno { get; set; }
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        userId = UserManager.GetUserId(HttpContextAccessor.HttpContext.User);
        http.BaseAddress = new Uri("https://localhost:7083/");
        await cargarTurno();
    }


    async Task cargarTurno()
    {
        if (userId != null && !userId.Equals(""))
        {
            turnos = await http.GetFromJsonAsync<Turno[]>($"https://localhost:7083/api/turnos/byUser/{userId}");
        }
        else
        {
            turnos =  new List<Turno>().ToArray();
        }
    }

    async Task crearTurno()
    {
        //var turnos = await http.GetFromJsonAsync<Turno[]>("https://localhost:7083/api/turnos");
        //await turno.EstablecerEstadoPorIdAsync(turno.PerroId, turno.motivoId);
        Turno turnoPost = new Turno(turno.Fecha, turno.Franja, turno.PerroId, turno.motivoId, userId);
        var res = await http.PostAsJsonAsync("api/turnos", turnoPost);
        ModalCrearTurno.Close();
        await cargarTurno();

    }

    async Task CancelarTurno(int id)
    {
        var turno = turnos.First(a => a.Id == id);

        string mensajeconfirmacion = $"¿Desea cancelar el turno?";
        if (await JS.InvokeAsync<bool>("confirm", mensajeconfirmacion))
        {
            await http.DeleteAsync($"https://localhost:7083/api/turnos/{id}");
            await cargarTurno();
        }
    }

    /*private void verificarId()
    {
        //var userId = UserManager.GetUserId(HttpContextAccessor.HttpContext.User);
        if (userId == null || userId.Equals(""))
        {
            //JS.InvokeVoidAsync("window.location.href", "/Identity/Account/Login");
            NavigationManager.NavigateTo("/Identity/Account/Login", forceLoad: true);
        }
        else
        {
            ModalCrearTurno.Open(userId);
        }
    }*/

}