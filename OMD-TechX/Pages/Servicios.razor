@page "/servicios"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@inject HttpClient http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject UserManager<IdentityUser> UserManager
@using OMD_TechX.Helpers;
@inject IJSRuntime JS

<div class="row">
    <div class="col">
        <h1>Servicios</h1>

    </div>

        
        
        <AuthorizeView Roles="Admin">
            <NotAuthorized>
            <div class="col-md-2" style="text-align:right;margin-right:30px">
                <select class="form-select" @onchange="filtrarServicios" style="width:200px; height:40px">
                    <option value="">Todas</option>
                    <option value="/paseadores">Paseadores</option>
                    <option value="/cuidadores">Cuidadores</option>
                </select>
            </div>
            </NotAuthorized>
            <Authorized>
            <div class="col-md-2" style="text-align:right;margin-right:30px">
                <select class="form-select" @onchange="filtrarServicios" style="width:200px; height:40px">
                    <option value="">Todas</option>
                    <option value="/paseadores">Paseadores</option>
                    <option value="/cuidadores">Cuidadores</option>
                </select>
            </div>
            <div class="col col-lg-2" style="text-align:right">
                    <input type="button" class="btn btn-success" style="background-color: #28567A" value="Cargar servicio" @onclick="()=> ModalFormularioServicio.Open()">
            </div>
                   
            
            </Authorized>
        </AuthorizeView>
    

</div>
<hr />
<ModalFormularioServicio @ref="@ModalFormularioServicio" TextoBoton="Aceptar" Titulo="Crear publicacion de servicio" OnValidSubmit="(() => crearServicio())" Servicio="@servicio">
</ModalFormularioServicio>

@if (servicios == null)
{
    <h4>cargando...</h4>
}
else if (servicios.Count == 0)
{
    <h4>No hay servicios.</h4>
}
else

{
    @foreach (Servicio s in servicios)
    {
        <div class="card" >
            <div class="card-header" style="background-color:#28567A;color:lightcyan">
                <img src="/imagenes/Logo2-removebg-preview.png" class="rounded float-end img-fluid" width="45px" height="45px" alt="omd-logo">
                <h5>@s.Nombre @s.Apellido ofrece sus servicios...</h5>
            </div>
            <div class="card-body" style="background: linear-gradient(to bottom right, #F8F9FA 30%, #28567A 90%);color:#28567A">
                <h5 class="card-text">Hola, soy @s.Nombre! Me gustan mucho los perros y amo lo que hago.</h5>
                <br>
                <h6 class="card-text">Actividad: @s.Tipo</h6>
                <h6 class="card-text">Franja Horaria: @s.Franja</h6>
                <h6 class="card-text">Si estás interesado contactame.</h6>
                <h6 class="card-text">Informacion de contacto:</h6>
                <h6 class="card-text">@s.Email</h6>
                <h6 class="card-text">@s.Telefono</h6>
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        <button class="btn" @onclick="@(()=>borrarServicio(s.Id))" style="float:right;background-color: #F0F0F0; color: #28567A"><i class="oi oi-trash"></i></button>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
        <br>
    }

}

@code
{

    List<Servicio> servicios { get; set; }
    Servicio servicio { get; set; } = new Servicio();
    ModalFormularioServicio ModalFormularioServicio { get; set; }

    private string userId;

    protected override async Task OnInitializedAsync()
    {
        userId = UserManager.GetUserId(HttpContextAccessor.HttpContext.User);
        http.BaseAddress = new Uri("https://localhost:7083/");
        //await prueba();
        await cargarServicios();
    }

    public async Task cargarServicios()
    {
        servicios = await http.GetFromJsonAsync<List<Servicio>>("api/servicios");
    }

    public async Task filtrarServicios(ChangeEventArgs valorSelect)
    {
        servicios = await http.GetFromJsonAsync<List<Servicio>>($"api/servicios{valorSelect.Value}");
    }

    public async Task prueba()
    {
        Servicio serv = new Servicio("Juana", "B", "jb@gmail.com", "12345", "Paseador", "Mañana");
        var res = await http.PostAsJsonAsync<Servicio>("api/servicios", serv);
    }

    public async Task crearServicio()
    {
        bool existe = servicios.Any(s => s.Tipo.Equals(servicio.Tipo) && s.Email.Equals(servicio.Email));
        if (!existe)
        {
            ModalFormularioServicio.textoNombre = "";
            ModalFormularioServicio.Close();
            var res = await http.PostAsJsonAsync<Servicio>("api/servicios", servicio);
            await cargarServicios();
        }
        else
        {
            ModalFormularioServicio.textoNombre = $"Ese email ya está en uso por otro {servicio.Tipo}";
        }
    }

    public async Task borrarServicio(int id)
    {
        var servicio = servicios.FirstOrDefault(a => a.Id == id);

        string mensajeconfirmacion = $"¿Desea borrar la publicacion de {servicio.Nombre}?";
        if (await JS.InvokeAsync<bool>("confirm", mensajeconfirmacion))
        {
            await http.DeleteAsync($"https://localhost:7083/api/servicios/{id}");
            await cargarServicios();
        }
    }
}