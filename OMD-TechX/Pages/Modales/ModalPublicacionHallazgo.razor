@inject HttpClient http;
@inject UserManager<IdentityUser> UserManager
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Identity;
@using OMD_TechX.Modelos;
<div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay; overflow:auto;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background-color: darkorange">
                <h5 class="modal-title">@Titulo</h5>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="Close"></button>
            </div>
            <div class="modal-body">

                <!-- comienzo del formulario-->
                <EditForm @ref="formRef" Model="@Hallazgo" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="error">
                    <!-- header -->


                    <div class="row">
                        <div class="d-flex align-items-center">
                            <h2>¡Oh My Dog!</h2>
                            <div class="ms-auto">
                                <img src="/imagenes/Logo2.png" class="rounded float-end img-fluid" width="50px" height="50px" alt="omd-logo">
                            </div>
                        </div>
                        <hr />
                    </div>

                    <!-- campos -->


                    <div class="row">
                        <div class="col-6">
                            <div class="row">
                                <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                    <text>@textoNombre</text>
                                    <ValidationMessage For="@(() => Hallazgo.Nombre)" class=""></ValidationMessage>
                                </label>
                                <div class="input-group mb-3">
                                    <span class="input-group-text" id="inputGroup-sizing-default">Nombre</span>
                                    <InputText @bind-Value="@Hallazgo.Nombre" id="floatingInputInvalid" class="form-control rounded float-end" aria-required="true" placeholder="Jack" />
                                </div>
                            </div>


                            <div class="row">
                                <div class="col">
                                    <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                        <text>@textoFoto</text>
                                        <ValidationMessage For="@(() => Hallazgo.Foto)"></ValidationMessage>
                                    </label>
                                    <div class="input-group mb-3">
                                        @if (!limpiarInputFile)
                                        {
                                            <InputFile OnChange="HandleFileSelected" class="form-control rounded" accept="image/jpeg"></InputFile>
                                        }

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="row justify-content-center">
                                <div class="col" style="display: flex;justify-content:center;align-items:center;">
                                    <div style="width: 150px; height: 150px; border-radius: 50%; overflow: hidden;">
                                        <img src="@imagenBase64" alt="Foto" class="rounded-circle" style="width: 100%; height: 100%; object-fit: cover; object-position: center;" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>



                    <div class="row">

                        <div class="col-6">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Hallazgo.Raza)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Raza</span>
                                <InputText @bind-Value="@Hallazgo.Raza" id="floatingInputInvalid" class="form-control rounded" aria-required="true" placeholder="Golden" />
                            </div>
                        </div>

                        <div class="col-6">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Hallazgo.Tamanio)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Tamaño</span>
                                <InputSelect @bind-Value="@Hallazgo.Tamanio" class="form-select">
                                    <option style="opacity:70%" value="">Seleccione el tamaño</option>
                                    <option value="Chico">Chico</option>
                                    <option value="Mediano">Mediano</option>
                                    <option value="Grande">Grande</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Hallazgo.Sexo)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Sexo</span>

                                <InputSelect @bind-Value="@Hallazgo.Sexo" class="form-select">
                                    <option style="opacity:70%" value="">Seleccione el sexo</option>
                                    <option value="Masculino">Masculino</option>
                                    <option value="Femenino">Femenino</option>
                                </InputSelect>
                            </div>
                        </div>

                        <div class="col-6">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Hallazgo.Color)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Color</span>
                                <InputText @bind-Value="@Hallazgo.Color" id="floatingInputInvalid" class="form-control rounded" aria-required="true" placeholder="Negro" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Hallazgo.FechaN)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Fecha de nacimiento</span>
                                <InputDate max="@DateTime.Now.ToString("yyyy-MM-dd")" @bind-Value="@Hallazgo.FechaN" id="floatingInputInvalid" class="form-control rounded" aria-required="true" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Hallazgo.comentarios)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Comentarios</span>
                                <InputText @bind-Value="@Hallazgo.comentarios" id="floatingInputInvalid" class="form-control rounded" aria-required="true" placeholder="Es muy bueno pero ya no puedo cuidarlo..." />
                            </div>
                        </div>
                    </div>


                    <div class="row">
                        <div class="col">
                            <button type="submit" style="background-color:#21618C" class="w-100 btn btn-lg btn-primary text-white">@TextoBoton</button>
                        </div>
                    </div>

                    <DataAnnotationsValidator> </DataAnnotationsValidator>

                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public string Titulo { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public Hallazgo Hallazgo { get; set; }
    [Parameter]
    public string TextoBoton { get; set; } = "Listo";
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private EditForm formRef;

    private string modalDisplay = "none";
    private string modalClass = string.Empty;
    private bool showBackdrop = false;

    private IBrowserFile? selectedFile;
    private string imagenBase64;
    private bool limpiarInputFile { get; set; }

    public string textoFoto = "";
    public string textoNombre = "";

    private HttpContext context { get; set; }


    private void ClearInputFile()
    {
        limpiarInputFile = true;
        StateHasChanged();
        limpiarInputFile = false;
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var buffer = new byte[selectedFile.Size];
        await selectedFile.OpenReadStream().ReadAsync(buffer, 0, (int)selectedFile.Size);


        // Obtener la extensión del archivo seleccionado
        string fileExtension = Path.GetExtension(selectedFile.Name);
        Console.WriteLine(fileExtension);

        // Definir las extensiones válidas
        string[] validExtensions = { ".jpg", ".jpeg" };

        // Verificar si la extensión está en la lista de extensiones válidas (ignorando mayúsculas y minúsculas)
        if (validExtensions.Any(ext => string.Equals(fileExtension, ext, StringComparison.OrdinalIgnoreCase)))
        {
            // El archivo tiene una extensión válida
            // Lee el contenido del archivo
            var stream = selectedFile.OpenReadStream();
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                byte[] fileBytes = memoryStream.ToArray();

                // Puedes hacer algo con los bytes del archivo, como enviarlos al backend para guardarlos en la base de datos
                Hallazgo.Foto = fileBytes;
            }
            // Guardar la ruta para mostrarla en el img
            imagenBase64 = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
            textoFoto = "";
            Console.WriteLine("El archivo seleccionado tiene un formato JPG");

        }
        else
        {
            // El archivo seleccionado no tiene una extensión válida
            // Realiza alguna acción en caso de error o muestra un mensaje de error al usuario
            // Por ejemplo:
            imagenBase64 = "/imagenes/perrito.jpg";

            //C:/Users/juana/Source/Repos/facundoaguel/OMD-TechX/OMD-TechX/wwwroot/imagenes/perrito.jpg
            //C:/Users/aguel/source/repos/OMD-TechX/OMD-TechX/wwwroot/imagenes/perrito.jpg
            Hallazgo.Foto = convertirImagen("C:/Users/juana/Source/Repos/facundoaguel/OMD-TechX/OMD-TechX/wwwroot/imagenes/perrito.jpg");
            textoFoto = "El formato del archivo debe ser una imagen en formato JPG, se restablecio a la imagen por defecto.";
            ClearInputFile();
            Console.WriteLine("El archivo seleccionado debe tener la extensión .jpg o .jpeg");
        }
    }

    public async Task Open() //cuando se abre para crear la idea es que los campos esten vacios
    {
        modalClass = "show";
        modalDisplay = "block";
        showBackdrop = true;

        textoNombre = "";
        textoFoto = "";

        Hallazgo.Nombre = "";
        Hallazgo.Tamanio = "";
        Hallazgo.Raza = "";
        Hallazgo.Color = "";
        Hallazgo.comentarios = "";
        Hallazgo.Sexo = "";
        Hallazgo.Id = 0;
        Hallazgo.FechaN = DateTime.Now;

        imagenBase64 = "/imagenes/perrito.jpg";

        //C:/Users/aguel/source/repos/OMD-TechX/OMD-TechX/wwwroot/imagenes/perrito.jpg
        //C:/Users/juana/Source/Repos/facundoaguel/OMD-TechX/OMD-TechX/wwwroot/imagenes/perrito.jpg

        Hallazgo.Foto = convertirImagen("C:/Users/aguel/source/repos/OMD-TechX/OMD-TechX/wwwroot/imagenes/perrito.jpg");
        ClearInputFile();

    }
    public async Task Close()
    {
        modalDisplay = "none";
        modalClass = string.Empty;
        showBackdrop = false;
        ClearInputFile();

    }
    public void error()
    {
        Console.WriteLine("Invalid submit");
    }

    private byte[] convertirImagen(string path)
    {
        byte[] imageBytes;
        using (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read))
        {
            using (BinaryReader br = new BinaryReader(fs))
            {
                imageBytes = br.ReadBytes((int)fs.Length);
            }
        }
        return imageBytes;
    }
}
