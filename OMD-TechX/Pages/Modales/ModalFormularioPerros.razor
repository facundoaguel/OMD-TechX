@inject HttpClient http;
<div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay; overflow:auto;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background-color: darkorange">
                <h5 class="modal-title">@Titulo</h5>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="Close"></button>
            </div>
            <div class="modal-body" >

                <!-- comienzo del formulario-->
                <EditForm @ref="MyEditForm" Model="@Perro" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="error">
                    <!-- header -->


                    <div class="row">
                        <div class="d-flex align-items-center">
                            <h2>¡Oh My Dog!</h2>
                            <div class="ms-auto">
                                <img src="/imagenes/Logo2.png" class="rounded float-end img-fluid" width="50px" height="50px" alt="omd-logo">
                            </div>
                        </div>
                        <hr />
                    </div>

                    <!-- campos -->
                    

                    <div class="row">
                        <div class="col-6">
                            <div class="row">
                                <div class="col">
                                    <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                        <text class="text-danger">@labelNombreEnUso</text>
                                        <ValidationMessage For="@(() => Perro.Nombre)" class=""></ValidationMessage>
                                   </label>
                                    <div class="input-group mb-3">
                                        <span class="input-group-text" id="inputGroup-sizing-default">Nombre</span>
                                        <InputText @bind-Value="@Perro.Nombre" id="floatingInputInvalid" class="form-control rounded float-end" aria-required="true" placeholder="Jack" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col">
                                    <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                        <ValidationMessage For="@(() => Perro.Foto)"></ValidationMessage>
                                    </label>
                                    <div class="input-group mb-3">
                                        @if(!limpiarInputFile){
                                            <InputFile OnChange="HandleFileSelected" class="form-control rounded" accept="image/jpeg"></InputFile>
                                        }
                                        
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-6">
                            <div class="row justify-content-center">
                                <div class="col" style="display: flex;justify-content:center;align-items:center;">
                                    <div style="width: 150px; height: 150px; border-radius: 50%; overflow: hidden;">
                                        <img src="@imagenBase64" alt="Foto" class="rounded-circle" style="width: 100%; height: 100%; object-fit: cover; object-position: center;" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                        
                    <div class="row">
                        <div class="col-6">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Perro.Raza)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Raza</span>
                                <InputText @bind-Value="@Perro.Raza" id="floatingInputInvalid" class="form-control rounded" aria-required="true" placeholder="Golden" />
                            </div>
                        </div>

                        <div class="col-6">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Perro.Tamanio)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Tamaño</span>
                                <InputText @bind-Value="@Perro.Tamanio" id="floatingInputInvalid" class="form-control rounded" aria-required="true" placeholder="Chico" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Perro.Sexo)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Sexo</span>

                                <InputSelect @bind-Value="@Perro.Sexo" class="form-select">
                                    <option style="opacity:70%" value="">Seleccione el sexo</option>
                                    <option value="Masculino">Masculino</option>
                                    <option value="Femenino">Femenino</option>
                                </InputSelect>
                            </div>
                        </div>

                        <div class="col-6">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Perro.Color)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Color</span>
                                <InputText @bind-Value="@Perro.Color" id="floatingInputInvalid" class="form-control rounded" aria-required="true" placeholder="Negro" />
                            </div>
                        </div>
                    </div>

                    <div class="row">

                        <div class="col-6">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Perro.UsuarioId)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Dueño/a</span>
                                <InputSelect @bind-Value="@Perro.UsuarioId" @onselect="() => StateHasChanged()" class="form-select rounded">
                                    @if (modoEdicion)
                                    {
                                        <option value="">Seleccione dueño/a</option>
                                        @foreach (var usuario in usuarios)
                                        {
                                            <option selected="@usuario.Id == Perro.UsuarioId" value="@usuario.Id">@usuario.DNI - @usuario.Nombre @usuario.Apellido</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="" selected>Seleccione dueño/a</option>
                                        @foreach (var usuario in usuarios)
                                        {
                                            <option value="@usuario.Id">@usuario.DNI - @usuario.Nombre @usuario.Apellido</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="col-6">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Perro.FechaN)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Fecha de nacimiento</span>
                                <InputDate @bind-Value="@Perro.FechaN" id="floatingInputInvalid" class="form-control rounded" aria-required="true" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-12">
                            <label for="floatingInputInvalid" class="text-danger" style="opacity: 75%">
                                <ValidationMessage For="@(() => Perro.Comentarios)"></ValidationMessage>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">Observaciones</span>
                                <InputText @bind-Value="@Perro.Comentarios" id="floatingInputInvalid" class="form-control rounded" aria-required="true" placeholder="" />
                            </div>
                        </div>
                    </div>


                    <div class="row">
                        <button type="submit" style="background-color:#21618C" class="w-100 btn btn-lg btn-primary text-white">@TextoBoton</button>
                    </div>

                    <DataAnnotationsValidator> </DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public string Titulo { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public Perro Perro { get; set; }
    [Parameter]
    public string TextoBoton { get; set; } = "Salvar cambios";
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private EditForm formRef;

    private string modalDisplay = "none";
    private string modalClass = string.Empty;
    private bool showBackdrop = false;
    private IBrowserFile? selectedFile;
    private string imagenBase64;
    private List<Usuario> usuarios = new List<Usuario>();
    private bool modoEdicion { get; set; }
    private bool limpiarInputFile { get; set; }

    public string labelNombreEnUso { get; set; }
    private EditForm MyEditForm;
    private string mensajeNombre;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var buffer = new byte[selectedFile.Size];
        await selectedFile.OpenReadStream().ReadAsync(buffer, 0, (int)selectedFile.Size);
        // Guardar la ruta para mostrarla en el img
        imagenBase64 = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";


        // Lee el contenido del archivo
        var stream = selectedFile.OpenReadStream();
        using (var memoryStream = new MemoryStream())
        {
            await stream.CopyToAsync(memoryStream);
            byte[] fileBytes = memoryStream.ToArray();

            // Puedes hacer algo con los bytes del archivo, como enviarlos al backend para guardarlos en la base de datos
            Perro.Foto = fileBytes;
        }
    }



    private void ClearInputFile()
    {
        limpiarInputFile = true;
        StateHasChanged();
        limpiarInputFile = false;
        StateHasChanged();
    }

    public async Task Open(int id) //cuando es abre para editar tengo que traerme los datos para editar
    {
        labelNombreEnUso = "";
        modoEdicion = true;
        modalDisplay = "block";
        modalClass = "show";
        showBackdrop = true;
        usuarios = await http.GetFromJsonAsync<List<Usuario>>("https://localhost:7083/api/usuarios");
        var perroFromApi = await http.GetFromJsonAsync<Perro>($"https://localhost:7083/api/perros/{id}");
        actualizarCampos(Perro, perroFromApi);
        ClearInputFile();

    }

    private void actualizarCampos(Perro perro, Perro perroFromApi)
    {
        perro.Id = perroFromApi.Id;
        perro.Nombre = perroFromApi.Nombre;
        perro.FechaN = perroFromApi.FechaN;
        perro.Raza = perroFromApi.Raza;
        perro.Tamanio = perroFromApi.Tamanio;
        perro.Color = perroFromApi.Color;
        perro.Comentarios = perroFromApi.Comentarios;
        perro.Sexo = perroFromApi.Sexo;
        perro.Foto = perroFromApi.Foto;
        imagenBase64 = "data:image/jpeg;base64," + Convert.ToBase64String(perroFromApi.Foto);
        perro.UsuarioId = perroFromApi.UsuarioId;
    }
    public async Task Open() //cuando se abre para crear la idea es que los campos esten vacios
    {
        labelNombreEnUso = "";
        modoEdicion = false;
        modalClass = "show";
        modalDisplay = "block";
        showBackdrop = true;
        usuarios = await http.GetFromJsonAsync<List<Usuario>>("https://localhost:7083/api/usuarios");
        Perro.Nombre = "";
        Perro.FechaN = null;
        Perro.Raza = "";
        Perro.Tamanio = "";
        Perro.Color = "";
        Perro.Comentarios = "";
        Perro.Sexo = "";  
        imagenBase64 = "/imagenes/perrito.jpg";
        Perro.Foto = convertirImagen("C:/Users/aguel/source/repos/OMD-TechX/OMD-TechX/wwwroot/imagenes/perrito.jpg");
        Perro.UsuarioId = "";
        Perro.Id = 0;
        ClearInputFile();

    }
    public async Task Close()
    {
        modalDisplay = "none";
        modalClass = string.Empty;
        showBackdrop = false;   
    }
    public void error()
    {
        Console.WriteLine("SUMARIO DE VALIDACION");
        foreach (var message in MyEditForm.EditContext.GetValidationMessages())
        {
            Console.WriteLine(message);

        }
        Console.WriteLine("/////////////// PERRO ////////////");
        Console.WriteLine(Perro.ToString());
        Console.WriteLine("Invalid submit");
    } 
    private byte[] convertirImagen(string path)
    {
        byte[] imageBytes;
        using (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read))
        {
            using (BinaryReader br = new BinaryReader(fs))
            {
                imageBytes = br.ReadBytes((int)fs.Length);
            }
        }
        return imageBytes;
    }
}
