@page "/turnosPendientes"
@inject HttpClient http
@inject IJSRuntime JS
            <h1 style="text-align: center">Turnos pendientes</h1>
            <hr />
            @if (turnosPendientes == null)
            {
                <h4>Cargando...</h4>
            }
            else if (turnosPendientes.Length == 0)
            {
                <h4>No hay turnos pendientes.</h4>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Fecha</th>
                            <th>Franja</th>
                            <th>Motivo</th>
                            <th>Perro</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var turno in turnosPendientes)
                        {
                            <tr>

                                <td>@turno.Fecha.ToShortDateString()</td>
                                <td>@turno.Franja</td>
                                <td>@turno.motivo</td>
                                <td>@turno.Perro</td>
                                <td style="text-align: right">
                                    <button class="btn btn-danger" @onclick="@(()=>CancelarTurno(turno.Id))"><i class="oi oi-x"></i></button>
                                    <button class="btn btn-success" @onclick="@(()=>AceptarTurno(turno.Id))"><i class="oi oi-check"></i></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        

<ModalHoraTurno turno="@turno" @ref="@horario" Titulo="Confirmar turno" OnValidSubmit="(() => editarTurno())">
</ModalHoraTurno>
<ModalDialog @ref="@recordatorio" Titulo="Recordatorio">
    <h4>Esta funcionalidad no entraba en este sprint, la hicimos para poder mostrar la eliminacion de perros.</h4>
</ModalDialog>


@code {
    Turno[] turnosPendientes { get; set; }
    private ModalHoraTurno horario { get; set; }
    private ModalDialog recordatorio { get; set; }
    private Turno turno { get; set; } = new Turno();

    protected override async Task OnInitializedAsync()
    {
        http.BaseAddress = new Uri("https://localhost:7083/");
        await cargarTurnosPendientes();
    }


    async Task cargarTurnosPendientes()
    {
        turnosPendientes = await http.GetFromJsonAsync<Turno[]>($"https://localhost:7083/api/turnos/pendientes");
    }

    async Task CancelarTurno(int turnoId)
    {
        //recordatorio.Open();
        string mensajeconfirmacion = $"¿Desea rechazar el turno?";
        if (await JS.InvokeAsync<bool>("confirm", mensajeconfirmacion))
        {
            //para que no se elimine para el usuario sino que lo vea pero con el estado rechazado
            Turno turno = await http.GetFromJsonAsync<Turno>($"https://localhost:7083/api/turnos/{turnoId}");
            turno.estado = "Rechazado";
            await http.PutAsJsonAsync("https://localhost:7083/api/turnos",turno);
            await cargarTurnosPendientes();
        }
    }
    async Task AceptarTurno(int turnoId)
    {
        turno = await http.GetFromJsonAsync<Turno>($"https://localhost:7083/api/turnos/{turnoId}");
        horario.Open(turno);
        //await editarTurno(turnoId);

    }
    async Task editarTurno()
    {
        horario.Close();    
        turno.estado = "Aceptado";
        var res = await http.PutAsJsonAsync($"https://localhost:7083/api/turnos", turno);
        
        await cargarTurnosPendientes();
    }
}
