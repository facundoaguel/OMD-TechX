@page "/atenciones"
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Mvc;
@inject HttpClient http
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Admin")]

<div class="d-flex">
    <div class="p-2 w-100"><h1>Atenciones</h1></div>
    <div class="p-2 flex-shrink-1">
        <input type="button" class="btn btn-success" style="background-color:#28567A" value="Cargar atención" @onclick="() => ModalCrearAtencion.Open()">
    </div>
</div>

<ModalFormularioAtenciones @ref="@ModalCrearAtencion" TextoBoton="Crear atención" Titulo="Crear atencion" OnValidSubmit="(() => crearAtencion())" Atencion="@atencion">
</ModalFormularioAtenciones>
<ModalFormularioAtenciones @ref="@ModalEditarAtencion" TextoBoton="Editar atención" Titulo="Editar atencion" OnValidSubmit="(() => editarAtencion())" Atencion="@atencion">
</ModalFormularioAtenciones>

@if (atenciones == null)
{
    <text>Cargando...</text>
}
else if(atenciones.Length == 0)
{
    <text>No hay atenciones cargados.</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Precio</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var atencion in atenciones)
            {
                <tr style="vertical-align:middle">

                    <td>@atencion.Nombre</td>
                    <td>$@atencion.Precio</td>
                    <td style="text-align:right; ">
                        @if (!atencion.EsOriginal())
                        {
                            <button class="btn btn-danger" @onclick="@(()=>BorrarAtencion(atencion.Id))" style="margin:5px"><i class="oi oi-trash"></i></button>
                        }
                        <button type="button" style="background-color:4BA9E7" class="btn btn-primary" value="Editar" @onclick="() => ModalEditarAtencion.Open(atencion.Id)"> <i class="oi oi-pencil"></i> </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<SurveyPrompt />
@code {
    Atencion[] atenciones { get; set; }
    Atencion atencion { get; set; } = new Atencion();
    private ModalFormularioAtenciones ModalCrearAtencion { get; set; }
    private ModalFormularioAtenciones ModalEditarAtencion { get; set; }


    protected override async Task OnInitializedAsync()
    {
        http.BaseAddress = new Uri("https://localhost:7083/");
        await cargarAtenciones();
    }


    async Task cargarAtenciones()
    {
        atenciones = await http.GetFromJsonAsync<Atencion[]>("https://localhost:7083/api/atenciones");
    }

    async Task editarAtencion()
    {
        await http.PutAsJsonAsync("api/atenciones", atencion);
        ModalEditarAtencion.Close();
        await cargarAtenciones();
    }

    async Task crearAtencion()
    {
        var atenciones = await http.GetFromJsonAsync<Atencion[]>("https://localhost:7083/api/atenciones");
        var existe = atenciones.Any(a => a.Nombre.Equals(atencion.Nombre));

        if (!existe)
        {
            await http.PostAsJsonAsync("api/atenciones", atencion);
            ModalCrearAtencion.Close();
            await cargarAtenciones();
        }
        else
        {
            ModalCrearAtencion.MensajeError = "El nombre esta en uso";
        }
    }

    async Task BorrarAtencion(int id)
    {
        var atencion = atenciones.First(a => a.Id == id);

        string mensajeconfirmacion = $"¿Desea borrar esta atencion: {atencion.Nombre}?";
        if (await JS.InvokeAsync<bool>("confirm", mensajeconfirmacion))
        {
            await http.DeleteAsync($"https://localhost:7083/api/atenciones/{id}");
            await cargarAtenciones();
        }
    }

}
