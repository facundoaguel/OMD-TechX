@page "/refugios"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@inject HttpClient http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject UserManager<IdentityUser> UserManager
@using OMD_TechX.Helpers;
@inject IJSRuntime JS

<div class="row">
    <div class="col">
        <h1>Refugios</h1>

    </div>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <div class="col col-lg-2" style="text-align:right">
                <input type="button" class="btn btn-success" style="background-color: #28567A" value="Cargar refugio" @onclick="()=> ModalFormularioRefugio.Open()">
            </div>
        </Authorized>
    </AuthorizeView>

</div>

<hr />


@if (refugios == null)
{
    <h4>Cargando...</h4>
}
else if (refugios.Count == 0)
{
    <h4>No hay refugios.</h4>
}
else

{
    @foreach (Refugio r in refugios)
    {
        <div class="card">
            <div class="card-header" style="background-color:#28567A;color:lightcyan">
                <img src="/imagenes/Logo2-removebg-preview.png" class="rounded float-end img-fluid" width="45px" height="45px" alt="omd-logo">
                <h4>@r.Nombre</h4>
            </div>
            <div class="card-body" style="background: linear-gradient(to bottom right, #F8F9FA 30%, #28567A 90%);color:#28567A">
                <br>
                <h5 class="card-text">Direccion: @r.Direccion</h5>
                <h5 class="card-text">Descripcion: @r.Descripcion</h5>
                @if (r.EnCampania)
                {
                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            <button class="btn" @onclick="@(()=>borrarRefugio(r.Id))" style="float:right;background-color: #F0F0F0; color: #28567A"><i class="oi oi-trash"></i></button>
                            <button class="btn" @onclick="@(()=>verListaDonadores(r.Id))" style="float:right;background-color: #F0F0F0; color: #28567A;margin-right:10px"><i class="">Ver donadores</i></button>
                            <button class="btn" @onclick="@(()=>finalizarCampania(r.Id))" style="float:right;background-color: #F0F0F0; color: #28567A;margin-right:10px"><i class="">Finalizar campaña</i></button>
                        </Authorized>
                        <NotAuthorized>
                            <button class="btn" @onclick="@(()=>modalDonaciones.Open(r.Id))" style="float:right;background-color: #F0F0F0; color: #28567A;margin-right:10px"><i class="">Donar</i></button>
                        </NotAuthorized>
                    </AuthorizeView>
                }
                else
                {
                    <h5 class="card-text text-danger" style="-webkit-text-stroke-width:0.5px">Campaña finalizada</h5>
                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            <button class="btn" @onclick="@(()=>verListaDonadores(r.Id))" style="float:right;background-color: #F0F0F0; color: #28567A;margin-right:10px"><i class="">Ver donadores</i></button>
                        </Authorized>
                    </AuthorizeView>
                }
            </div>
        </div>
        <br>
    }

}
<ModalDialog @ref="@listadoDonaciones" Titulo="Listado de donaciones">
    @if (donaciones == null)
    {
        <h4>Cargando...</h4>
    }
    else if (donaciones.Count == 0)
    {
        <h4>Nadie donó por el momento.</h4>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Dinero donado</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (Donacion d in donaciones)
                {
                    <tr style="vertical-align:middle">

                        <td>@d.Nombre</td>
                        <td>@d.Apellido</td>
                        <td>$@d.Donado</td>
                        <td></td>
                    </tr>

                }
            </tbody>
        </table>     
    }
</ModalDialog>
<ModalFormularioRefugio @ref="@ModalFormularioRefugio" TextoBoton="Publicar" Titulo="Publicar un refugio" OnValidSubmit="(() => crearRefugio())" Refugio="@refugio">
</ModalFormularioRefugio>

<ModalDonaciones @ref="@modalDonaciones" TextoBoton="Donar" Titulo="Donar a un refugio" OnValidSubmit="(() => donar())" DonacionFormulario="@donacionFormulario">
</ModalDonaciones>
@code
{
    List<Refugio> refugios { get; set; }
    Refugio refugio { get; set; } = new Refugio();
    List<Donacion> donaciones { get; set; }
    Donacion donacion { get; set; } = new Donacion();
    List<Tarjeta> tarjetasValidas { get; set; }
    Tarjeta tarjeta { get; set; } = new Tarjeta();
    DonacionFormulario donacionFormulario { get; set; } = new DonacionFormulario();

    List<Usuario> usuarios { get; set; }

    ModalFormularioRefugio ModalFormularioRefugio { get; set; }
    ModalDialog listadoDonaciones { get; set; }
    ModalDonaciones modalDonaciones{ get; set; }

    private string userId;
    private string mostrar;

    protected override async Task OnInitializedAsync()
    {
        userId = UserManager.GetUserId(HttpContextAccessor.HttpContext.User);
        http.BaseAddress = new Uri("https://localhost:7083/");
        await cargarRefugios();
        await cargarTarjetas();
        await cargarUsuarios();
    }

    public async Task cargarRefugios()
    {
        refugios = await http.GetFromJsonAsync<List<Refugio>>("api/refugios");
    }

    public async Task cargarTarjetas()
    {
        tarjetasValidas = await http.GetFromJsonAsync<List<Tarjeta>>("api/tarjetas");
    }

    public async Task cargarUsuarios()
    {
        usuarios = await http.GetFromJsonAsync<List<Usuario>>("api/usuarios");   
    }

    public async Task verListaDonadores(int id)
    {

        refugio = refugios.FirstOrDefault(a => a.Id == id);
        donaciones = await http.GetFromJsonAsync<List<Donacion>>($"api/donaciones/byRefugio/{refugio.Id}");

        listadoDonaciones.Open(); 
    }



    public async Task crearRefugio()
    {
        bool existe = refugios.Any(r => r.Nombre.ToLower().Equals(refugio.Nombre.ToLower()) && r.Direccion.ToLower().Equals(refugio.Direccion.ToLower()));

        if (!existe)
        {
            refugio.EnCampania = true;
            ModalFormularioRefugio.textoNombre = "";
            ModalFormularioRefugio.Close();
            var res = await http.PostAsJsonAsync<Refugio>("api/refugios", refugio);
            await cargarRefugios();
        }
        else
        {
            ModalFormularioRefugio.textoNombre = $"El refugio {refugio.Nombre} ya esta cargado";
        }
    }

    public async Task donar()
    {
        tarjeta = tarjetasValidas.FirstOrDefault(t => t.Numero.Equals(donacionFormulario.Numero));
        Usuario usuario = usuarios.FirstOrDefault(u => u.Id.Equals(userId));
        if (tarjeta != null)
        {
            modalDonaciones.errorNumero = "";
            if (!(tarjeta.CodigoDeSeguridad.Equals(donacionFormulario.CodigoDeSeguridad))||!(tarjeta.NombreTitular.ToLower().Equals(donacionFormulario.NombreTitular.ToLower()))||!(tarjeta.FechaVencimiento.ToString("mm-YY").Equals(donacionFormulario.FechaVencimiento.ToString("mm-YY"))))
            {
                modalDonaciones.errorDatos = "Hay problemas con los datos ingresados";
            }
            else
            {
                modalDonaciones.errorDatos = "";
                if (tarjeta.Monto >= donacionFormulario.MontoADonar)
                {
                    modalDonaciones.errorSaldo = "";
                    modalDonaciones.errorDatos = "";
                    modalDonaciones.errorNumero = "";
                    modalDonaciones.Close();

                    donacion.Donado = donacionFormulario.MontoADonar;
                    donacion.RefugioId = modalDonaciones.idRefugio;
                    if (usuario != null)
                    {
                        donacion.Nombre = usuario.Nombre;
                        donacion.Apellido = usuario.Apellido;
                    }
                    else
                    {
                        donacion.Nombre = "Anónimo";
                        donacion.Apellido = "Anónimo";
                    }
                    var res = await http.PostAsJsonAsync<Donacion>("api/donaciones", donacion);
                }
                else
                {
                    modalDonaciones.errorSaldo = "La tarjeta ingresada no tiene saldo suficiente";
                }
            }
        }
        else
        {
            modalDonaciones.errorNumero = "El numero de tarjeta es inválido";
        }
    }

    public async Task finalizarCampania(int refugioId)
    {
        refugio = refugios.FirstOrDefault(r => r.Id == refugioId);
        refugio.EnCampania = false;
        await http.PutAsJsonAsync<Refugio>("api/refugios",refugio);
        await cargarRefugios();
    }

    public async Task borrarRefugio(int id)
    {
        refugio = refugios.FirstOrDefault(a => a.Id == id);

        string mensajeconfirmacion = $"¿Desea borrar la publicacion de {refugio.Nombre}?";
        if (await JS.InvokeAsync<bool>("confirm", mensajeconfirmacion))
        {
            await http.DeleteAsync($"https://localhost:7083/api/refugios/{id}");
            await cargarRefugios();
        }
    }
}