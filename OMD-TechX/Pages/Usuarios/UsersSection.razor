@page "/usuarios"
@using System.Net.Http.Headers;
@inject HttpClient http
@inject IJSRuntime JS

<style>
    body{
        
    }
</style>

<div class="d-flex">
    <div class="p-2 w-100"><h1>Usuarios</h1></div>
    <div class="p-2 flex-shrink-1">
        <input type="button" class="btn btn-success" style="background-color: #28567A" value="Registrar cliente" onclick="window.location.href='Identity/Account/Register'">
    </div>
</div>


@if (usuarios == null)
{
    <h4>Cargando...</h4>
}
else if (usuarios.Length == 0)
{
    <h4>No hay usuarios cargados.</h4>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>DNI</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>
                <th>Telefono</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in usuarios)
            {
                <tr>

                    <td>@user.DNI</td>
                    <td>@user.Nombre</td>
                    <td>@user.Apellido</td>
                    <td>@user.Email</td>
                    <td>@user.Telefono</td>
                    <td style="text-align: right">
                        <button class="btn btn-danger" @onclick="@(()=>BorrarUsuarioLogico(user.Id))"><i class="oi oi-trash"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<SurveyPrompt />

<ModalDialog @ref="@notificacion" Titulo="Error">
    <h3>El usuario tiene perros asociados, para borrarlo, tendras que eliminar sus perros.</h3>
</ModalDialog>

@code {
    Usuario[] usuarios { get; set; }
    private ModalDialog notificacion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await loadUsers();
    }

    async Task loadUsers()
    {
        //hago un GET al controlador de usuarios /api/usuarios
        //esta definido en UsuariosController como ApiController
        usuarios = await http.GetFromJsonAsync<Usuario[]>("https://localhost:7083/api/usuarios/actuales");
    }

    async Task BorrarUsuario(string id)
    {
        var usuario = usuarios.First(u => u.Id == id);
        if (usuario.Perros.Count > 0)
        {
            notificacion.Open();
        }
        else
        {
            string mensajeconfirmacion = $"¿Desea borrar este usuario: {usuario.Email}?";
            if (await JS.InvokeAsync<bool>("confirm", mensajeconfirmacion))
            {
                await http.DeleteAsync($"https://localhost:7083/api/usuarios/{id}");
                await loadUsers();
            }
        }

    }

    async Task BorrarUsuarioLogico(string id)
    {
        var usuario = usuarios.First(u => u.Id == id);
        string mensajeconfirmacion = $"¿Desea borrar este usuario: {usuario.Email}?";
        if (await JS.InvokeAsync<bool>("confirm", mensajeconfirmacion))
        {
            List<Publicacion> publicaciones = await http.GetFromJsonAsync<List<Publicacion>>($"https://localhost:7083/api/publicaciones/usuario/{usuario.Id}");
            foreach (Publicacion publicacion in publicaciones)
            {
                await publicacion.borrar();
            }

            foreach (Perro perro in usuario.Perros)
            {
                if (!perro.eliminado)
                {
                    await BorrarPerroEnCadena(perro.Id);
                }
                
            }

            usuario.eliminado = true;
            await http.PutAsJsonAsync<Usuario>("https://localhost:7083/api/usuarios/normal", usuario);

            await loadUsers();
           

            
            
        }
    }

    async Task BorrarPerroEnCadena(int id)
    {
        var perro = await http.GetFromJsonAsync<Perro>($"https://localhost:7083/api/perros/{id}");
        foreach (Turno turno in perro.Turnos)
        {
            await http.DeleteAsync($"https://localhost:7083/api/turnos/{turno.Id}");
        }
        perro.eliminado = true;
        await http.PutAsJsonAsync<Perro>("https://localhost:7083/api/perros", perro);
    }
}