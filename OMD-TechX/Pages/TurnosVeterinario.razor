@page "/turnosVet"
@inject HttpClient http
@inject IJSRuntime JS
<h2 style="text-align:center">Turnos</h2>
<hr />
<div class="container">
    <div class="row">
        <div style="margin-right: 10px" class="col-sm-7">
            <h4 style="text-align: center">Pendientes</h4>
            <hr />
            @if (turnosPendientes == null)
            {
                <text>Cargando...</text>
            }
            else if (turnosPendientes.Length == 0)
            {
                <text>No hay turnos pendientes.</text>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Fecha</th>
                            <th>Franja</th>
                            <th>Motivo</th>
                            <th>Perro</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var turno in turnosPendientes)
                        {
                            <tr>

                                <td>@turno.Fecha.ToShortDateString()</td>
                                <td>@turno.Franja</td>
                                <td>@turno.motivo</td>
                                <td>@turno.Perro</td>
                                <td style="text-align: right">
                                    <button class="btn btn-danger" @onclick="@(()=>CancelarTurno(turno.Id))"><i class="oi oi-x"></i></button>
                                    <button class="btn btn-success" @onclick="@(()=>AceptarTurno(turno.Id))"><i class="oi oi-check"></i></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                }
        </div>
        <div style="margin-left: 10px" class="col-sm    ">
            <h4 style="text-align:center">Aceptados</h4>
            <hr />
            @if (turnosAceptados == null)
            {
                <text>Cargando...</text>
            }
            else if (turnosAceptados.Length == 0)
            {
                <text>No hay turnos aceptados.</text>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Fecha</th>
                            <th>Franja</th>
                            <th>Motivo</th>
                            <th>Perro</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var turno in turnosAceptados)
                        {
                            <tr>

                                <td>@turno.Fecha.ToShortDateString()</td>
                                <td>@turno.Franja</td>
                                <td>@turno.motivo</td>
                                <td>@turno.Perro</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
<SurveyPrompt />

<ModalDialog @ref="@notificacion" Titulo="Recodatorio">
    <h4>Esta funcionalidad no entraba en este sprint, la hicimos para poder mostrar los escenarios de listas vacias.</h4>
</ModalDialog>
<ModalDialog @ref="@recordatorio" Titulo="Recordatorio">
    <h4>Esta funcionalidad no entraba en este sprint, la hicimos para poder mostrar la eliminacion de perros.</h4>
</ModalDialog>


@code {
    Turno[] turnosPendientes { get; set; }
    Turno[] turnosAceptados { get; set; }
    private ModalDialog notificacion { get; set; }
    private ModalDialog recordatorio { get; set; }
    protected override async Task OnInitializedAsync()
    {
        http.BaseAddress = new Uri("https://localhost:7083/");
        await cargarTurnosPendientes();
        await cargarTurnosAceptados();
    }


    async Task cargarTurnosPendientes()
    {
        turnosPendientes = await http.GetFromJsonAsync<Turno[]>($"https://localhost:7083/api/turnos/pendientes");
    }

    async Task cargarTurnosAceptados()
    {
        turnosAceptados = await http.GetFromJsonAsync<Turno[]>($"https://localhost:7083/api/turnos/aceptados");
    }

    async Task CancelarTurno(int turnoId)
    {
        recordatorio.Open();
        /*string mensajeconfirmacion = $"¿Desea rechazar el turno?";
        if (await JS.InvokeAsync<bool>("confirm", mensajeconfirmacion))
        {

            await http.DeleteAsync($"https://localhost:7083/api/turnos/{turnoId}");
            await cargarTurnosPendientes();
        }*/
    }
    async Task AceptarTurno(int turnoId)
    {
        notificacion.Open();
        /*Turno turno = await http.GetFromJsonAsync<Turno>($"https://localhost:7083/api/turnos/{turnoId}");
        turno.estado = "Aceptado";
        await http.PutAsJsonAsync($"https://localhost:7083/api/turnos", turno);
        await cargarTurnosPendientes();
        await cargarTurnosAceptados();*/
    }
}
