@page "/perros"
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Mvc;
@inject HttpClient http
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Admin")]


<div class="d-flex">
    <div class="p-2 w-100"><h1>Perros</h1></div>
    <div class="p-2 flex-shrink-1">
        <input type="button" class="btn btn-success" style="background-color: #28567A" value="Cargar perro" @onclick="() => ModalCrearPerro.Open()">
    </div>
</div>

<ModalFormularioPerros @ref="@ModalCrearPerro" TextoBoton="Cargar perro" Titulo="Cargar perro" OnValidSubmit="(() => crearPerro())" Perro="@perro">
</ModalFormularioPerros>
<ModalFormularioPerros @ref="@ModalEditarPerro" TextoBoton="Editar perro" Titulo="Editar perro" OnValidSubmit="(() => editarPerro())" Perro="@perro">
</ModalFormularioPerros>


@if (perros == null)
{
    <text>Cargando...</text>
}
else if (perros.Length == 0)
{
    <text>No hay perros cargados.</text>
}
else
{
    <table class="table">
        <thead>
            <tr style="text-align:center; vertical-align: middle">
                <th></th>
                <th>Nombre</th>
                <th>Dueño/a</th>
                <th>Raza</th>
                <th>Sexo</th>
                <th>Fecha de nacimiento</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var perro in perros)
            {
                usuario = usuarios.FirstOrDefault(u => u.Id == perro.UsuarioId);
                imagenBase64 = "data:image/jpeg;base64," + Convert.ToBase64String(perro.Foto);
                <tr style="text-align:center; vertical-align: middle;">
                    <td>
                        <div style="margin-left:30px; margin-right:-40px;width: 60px; height: 60px; border-radius: 50%; overflow: hidden;">
                            <img src="@imagenBase64" alt="Foto" class="rounded-circle" style="width: 100%; height: 100%; object-fit: cover; object-position: center;" />
                        </div>
                    </td>
                    <td>@perro.Nombre</td>
                    <td>@usuario.Nombre @usuario.Apellido</td>
                    <td>@perro.Raza</td>
                    <td>@perro.Sexo</td>
                    <td>@perro.FechaN.ToShortDateString()</td>
                    <td style="text-align:right;">
                        <button class="btn btn-danger" @onclick="@(()=>BorrarPerro(perro.Id))"><i class="oi oi-trash"></i> </button>
                        <button class="btn btn-primary" style="background-color: 4BA9E7" value="Editar" @onclick="@(()=>ModalEditarPerro.Open(perro.Id))"><i class="oi oi-pencil"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<SurveyPrompt />

<!--<RadzenButton Text="@text" Click="@botonClick"></RadzenButton>-->
@code {
    /*string text = "hola";
    * 
    void botonClick()
    {

    }*/
    Perro[] perros { get; set; }
    Perro perro { get; set; } = new Perro();
    List<Usuario> usuarios { get; set; } = new List<Usuario>();
    Usuario usuario { get; set; } = new Usuario();
    private string imagenBase64 { get; set; }
    private ModalFormularioPerros ModalCrearPerro { get; set; }
    private ModalFormularioPerros ModalEditarPerro { get; set; }

    protected override async Task OnInitializedAsync()
    {
        http.BaseAddress = new Uri("https://localhost:7083/");
        await cargarPerros();
    }

    async Task crearPerro()
    {

        var usuario = await http.GetFromJsonAsync<Usuario>($"https://localhost:7083/api/usuarios/{perro.UsuarioId}");
        bool nombreEnUso = usuario.Perros.Any(p => p.Nombre.Equals(perro.Nombre));
        if (!nombreEnUso)
        {
            ModalCrearPerro.labelNombreEnUso = "";
            await http.PostAsJsonAsync("https://localhost:7083/api/perros", perro);
            ModalCrearPerro.Close();
            await cargarPerros();
        }
        else
        {
            ModalCrearPerro.labelNombreEnUso = "El dueño ya tiene un perro asociado con ese nombre. Por favor, ingrese otro";
        }
      
    }

    async Task cargarPerros()
    {
        await cargarUsuarios();
        perros = await http.GetFromJsonAsync<Perro[]>("https://localhost:7083/api/perros");

    }
    async Task cargarUsuarios()
    {
        usuarios = await http.GetFromJsonAsync<List<Usuario>>($"https://localhost:7083/api/usuarios");
    }
    async Task editarPerro()
    {
        var perroFromApi = await http.GetFromJsonAsync<Perro>($"https://localhost:7083/api/perros/{perro.Id}");
        string nombreActual = perroFromApi.Nombre;
        if (nombreActual.Equals(perro.Nombre))
        {
            await http.PutAsJsonAsync($"api/perros", perro);
            ModalEditarPerro.Close();
            await cargarPerros();
        }
        else
        {
            var usuario = await http.GetFromJsonAsync<Usuario>($"https://localhost:7083/api/usuarios/{perro.UsuarioId}");
            bool nombreEnUso = usuario.Perros.Any(p => p.Nombre.Equals(perro.Nombre));
            if (!nombreEnUso)
            {
                ModalEditarPerro.labelNombreEnUso = "";
                await http.PutAsJsonAsync($"api/perros", perro);
                ModalEditarPerro.Close();
                await cargarPerros();
            }
            else
            {
                ModalEditarPerro.labelNombreEnUso = "El dueño ya tiene un perro asociado con ese nombre. Por favor, ingrese otro";
            }
        }
        
    }

    async Task BorrarPerro(int id)
    {
        var perro = perros.First(a => a.Id == id);

        string mensajeconfirmacion = $"¿Desea borrar este perro: {perro.Nombre}?";
        if (await JS.InvokeAsync<bool>("confirm", mensajeconfirmacion))
        {
            await http.DeleteAsync($"https://localhost:7083/api/perros/{id}");
            await cargarPerros();
        }
    }
}
