@page "/adopciones"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@inject HttpClient http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject UserManager<IdentityUser> UserManager
@using OMD_TechX.Helpers;

<div class="row align-items-center">
    <div class="col">
        <h1>Adopciones</h1>
       
    </div>
    <AuthorizeView Roles="Normal">
        <Authorized>
            <!--<div class="btn-group" role="group" aria-label="Basic radio toggle button group" style="display:flex; width:50%">
                <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" @onclick="@(() => cargarAdopciones())" checked>
                <label class="btn btn-outline-primary" for="btnradio1" style="display:1; width:50%">Todo</label>

                <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" @onclick="@(() => cargarAdopcionesUsuario())">
                <label class="btn btn-outline-primary" for="btnradio2" style="display:1; width:50%">Mis publicaciones</label>
            </div>-->
            <div class="col-md-auto">
                <div class="form-check form-check-inline" style="font-size:18px">
                    <label class="form-check-label" for="defaultCheck1" >
                        Mis publicaciones
                    </label>
                    <input class="form-check-input" type="checkbox" value="" style="margin-top:7px" id="defaultCheck1" @onclick=@(()=> filtrarPublicaciones())>
                </div>
            </div>
            <div class="col col-lg-2" style="text-align:right">
                <input type="button" class="btn btn-success" style="background-color: #28567A" value="Publicar adopcion" @onclick="() => ModalCrearPublicacionAdopcion.Open()">
            </div>


            
        </Authorized>
    </AuthorizeView>
    
</div>
<hr/>
@if (adopciones == null)
{
    <h4>Cargando...</h4>
}
else if (adopciones.Count == 0)
{
    <h4>No hay publicaciones</h4>
}
else
{

    foreach(Adopcion a in adopciones)
    {
        usuario = usuarios.FirstOrDefault(u => u.Id == a.UsuarioId);
        if (usuario!= null)
        {
            <div class="card">
                <div class="card-header" style="background-color:#28567A;color:lightcyan">
                    <img src="/imagenes/Logo2-removebg-preview.png" class="rounded float-end img-fluid" width="45px" height="45px" alt="omd-logo">
                    <h5>@usuario.Nombre @usuario.Apellido creo una publiación de adopción...</h5>
                </div>
                <div class="card-body">
                    <h4>Hola mi nombre es @a.Nombre y estoy buscando un hogar!</h4>
                    @if (a.Sexo.Equals("Masculino"))
                    {
                        <h6 class="card-text">Soy un perrito de raza @a.Raza, tengo @a.calcularEdad().ToString() años, mi tamaño es @a.Tamanio, y soy de color @a.Color. </h6>
                    }
                    else
                    {
                        <h6 class="card-text">Soy una perrita de raza @a.Raza, tengo @a.calcularEdad().ToString() años, mi tamaño es @a.Tamanio, y soy de color @a.Color. </h6>
                    }

                    <h5 class="card-text">Informacion adicional: </h5>
                    <h6 class="card-text">@a.comentarios</h6>

                    <h6 class="card-text">Contacto: Tel @usuario.Telefono - Email @usuario.Email</h6>
                    @if (a.completado)
                    {
                        <h6 class="card-text text-danger">Adoptado</h6>
                    }
                    else
                    {
                        <AuthorizeView Roles="Normal">
                            <Authorized>
                                @if (a.UsuarioId.Equals(userId))
                                {
                                    <button type="button" @onclick="@(() => adoptar(a.Id))" class="btn" style="float: right; background-color:#FFA75A; color:maroon;font-style:italic;font-weight:30px">Marcar como adoptado</button>
                                }
                                else
                                {
                                    <button type="button" @onclick="@(() => mandarMail(a.UsuarioId, a.Nombre))" class="btn rounded" style="float: right;background-color:#28567A;color:darkorange"><i class="oi oi-envelope-open"></i></button>
                                }
                            </Authorized>
                            <NotAuthorized>

                                <button type="button" @onclick="@(() => abrirModal(a.UsuarioId, a.Nombre))" class="btn rounded" style="float: right;background-color:#28567A;color:darkorange"><i class="oi oi-envelope-open"></i></button>
                            </NotAuthorized>
                        </AuthorizeView>
                    }
                </div>
            </div>
            <br />
        }
        
    }
   
}

<ModalPublicaciones @ref="@ModalCrearPublicacionAdopcion" TextoBoton="Crear publicacion" Titulo="Crear publicacion" OnValidSubmit="(() => crearPublicacionAdopcion())" Adopcion="@adopcion">
</ModalPublicaciones>
<ModalContrasenia @ref="@ModalContrasenia" TextoBoton="Confirmar" Titulo="Enviar Mail de contacto" OnValidSubmit="(() => mandarMailNoAutorizado())" User="@userMail">
</ModalContrasenia>
<ModalDialog @ref="@avisoEnvio" Titulo="Mail enviado"> 
    <h4>Hemos enviado un mail automatico al creador de la publicacion especificando que se contacte a tu mail.</h4>
    <h5>Gracias por elegir el camino de la adopcion.</h5>
</ModalDialog>

@code {
    List<Adopcion> adopciones { get; set; }

    Adopcion adopcion { get; set; } = new Adopcion();
    ModalPublicaciones ModalCrearPublicacionAdopcion { get; set; }
    ModalContrasenia ModalContrasenia { get; set; }
    ModalDialog avisoEnvio{ get; set; }

    Usuario userMail { get; set; } = new Usuario();

    List<Usuario> usuarios { get; set; } = new List<Usuario>();
    Usuario usuario { get; set; } = new Usuario();

    private bool filtro = false;

    private string userId;
    string nombrePerro;
    string idUsuarioMail;

    protected override async Task OnInitializedAsync()
    {
        userId = UserManager.GetUserId(HttpContextAccessor.HttpContext.User);
        http.BaseAddress = new Uri("https://localhost:7083/");
        //await prueba();
        //await prueba2();
        await cargarAdopciones();
        await cargarUsuarios();
    }

    

    async Task cargarUsuarios()
    {
        usuarios = await http.GetFromJsonAsync<List<Usuario>>($"https://localhost:7083/api/usuarios/actuales");
    }

    public async Task cargarAdopciones()
    {
        adopciones = await http.GetFromJsonAsync<List<Adopcion>>("api/publicaciones/adopciones"); 
    }

    public async Task cargarAdopcionesUsuario()
    {
        string usuarioId = UserManager.GetUserId(HttpContextAccessor.HttpContext.User);
        adopciones = await http.GetFromJsonAsync<List<Adopcion>>($"api/publicaciones/adopciones/{usuarioId}");
    }

    public async Task filtrarPublicaciones()
    {
        if (this.filtro)
        {
            this.filtro = false;
            await cargarAdopciones();
        }
        else
        {
            this.filtro = true;
            await cargarAdopcionesUsuario();
        }
    }

    async Task crearPublicacionAdopcion()
    {
        adopcion.UsuarioId = userId;
        List<Adopcion> adopcionesUser = await http.GetFromJsonAsync<List<Adopcion>>($"https://localhost:7083/api/publicaciones/adopciones/{userId}");
        bool nombreEnUso = adopcionesUser.Any(a => a.Nombre.Equals(adopcion.Nombre));

        if (!nombreEnUso)
        {
            ModalCrearPublicacionAdopcion.textoNombre = "";
            var res = await http.PostAsJsonAsync("https://localhost:7083/api/publicaciones", adopcion);
            ModalCrearPublicacionAdopcion.Close();
            await cargarAdopciones();
        }
        else
        {
            ModalCrearPublicacionAdopcion.textoNombre = "Ya tenes una publicacion de un perro con este nombre.";
        }

        /*var usuario = await http.GetFromJsonAsync<Usuario>($"https://localhost:7083/api/usuarios/{perro.UsuarioId}");
        bool nombreEnUso = existentes.Any(p => p.Nombre.Equals(perro.Nombre));
            if (!nombreEnUso)
            {
            ModalCrearPerro.labelNombreEnUso = "";
            await http.PostAsJsonAsync("https://localhost:7083/api/perros", perro);
            ModalCrearPerro.Close();
            await cargarPerros();
            }
            else
            {
            ModalCrearPerro.labelNombreEnUso = "El dueño ya tiene un perro asociado con ese nombre. Por favor, ingrese otro";
        }*/

    }

    public async Task mostrarPublicaciones()
    {

    }
    public async Task prueba()
    {
        Adopcion a1 = new Adopcion("prueba", DateTime.Now, "raza","chico", "fem", "gris", "1234", "coms");
        var res1 = await http.PostAsJsonAsync<Adopcion>("api/publicaciones", a1);
    }
    public async Task prueba2()
    {
        Adopcion a2 = new Adopcion("prueba dos", DateTime.Now, "raza dos", "chico", "fem", "gris", "1234", "coms");
        var res2 = await http.PostAsJsonAsync<Adopcion>("api/publicaciones", a2);
    }
    public void cerrar()
    {
        ModalContrasenia.Close();
    }
    public async Task mandarMail(string id, string nombrePerro)
    {
        Usuario from = await http.GetFromJsonAsync<Usuario>($"https://localhost:7083/api/usuarios/{userId}");
        Usuario to = await http.GetFromJsonAsync<Usuario>($"https://localhost:7083/api/usuarios/{id}");
        CorreoElectronico.enviarCorreoDesdeHasta(from.Email,to.Email,to.Nombre,nombrePerro);
        avisoEnvio.Open();
    }

    public async Task mandarMailNoAutorizado()
    {
        ModalContrasenia.Close();
        //Usuario from = await http.GetFromJsonAsync<Usuario>($"https://localhost:7083/api/usuarios/{userId}");
        Usuario to = await http.GetFromJsonAsync<Usuario>($"https://localhost:7083/api/usuarios/{idUsuarioMail}");
        CorreoElectronico.enviarCorreoDesdeHasta(userMail.Email, to.Email, to.Nombre, nombrePerro);
        avisoEnvio.Open();
    }
    public async Task abrirModal(string id, string nombrePerro)
    {
        this.nombrePerro = nombrePerro;
        this.idUsuarioMail = id;

        ModalContrasenia.Open();
    }

    public async Task adoptar(int id)
    {
        Adopcion adopcion = adopciones.FirstOrDefault(a => a.Id == id);
        adopcion.completado = true;
        await http.PutAsJsonAsync<Publicacion>("https://localhost:7083/api/publicaciones", adopcion);
        if (!this.filtro)
        {
            await cargarAdopciones();
        }
        else
        {
            await cargarAdopcionesUsuario();
        }
    }
}
